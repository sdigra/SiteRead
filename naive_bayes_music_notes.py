# -*- coding: utf-8 -*-
"""Naive Bayes Music Notes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LerEBDhoe8nRyY0eKVM0dyPQ9uNlgw8-
"""

from google.colab import drive
drive.mount('/content/drive')

from PIL import Image
import os
import numpy as np
import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB

def image_to_arr(filename):
    image = Image.open(filename).convert('L')
    plt.imshow(image)
    plt.show()
    width, height = image.size
    pixel_values = list(image.getdata())
    pixel_values = np.array(pixel_values).reshape((width, height))
    pixel_values = ((pixel_values / 17)).astype(int).astype(float)
    return pixel_values

target_dict = { "rest_whole" : 0, "rest_half" : 1, "rest_quarter" : 2, "rest_eighth" : 3, "note_whole" : 4, "note_half" : 5, "note_quarter" : 6, "note_eighth" : 7, "note_eighth_beam" : 8}

images = []
target = np.array([])
path = "/content/drive/MyDrive/222_project/target_images/"
for filename in os.listdir(path):
    if filename.endswith("jpg"): 
        images.append(image_to_arr(path+filename))
        target = np.append(target, target_dict[filename[:len(filename)-6]])
images = np.array(images)

# # debugging
# print(images[2])
# print(digits.images[0])
# image = Image.open("/content/drive/MyDrive/222_project/target_images/black_white.jpg").convert('L')
# plt.imshow(image)
# plt.show()

n_samples = len(images)
data = images.reshape((n_samples, -1))

X_train, X_test, y_train, y_test = train_test_split(
    data, target, test_size=0.5, shuffle=False)

GNB_classifier = GaussianNB()
GNB_classifier.fit(X_train, y_train)
predicted = GNB_classifier.predict(X_test)
_, axes = plt.subplots(2, 4)
images_and_labels = list(zip(images, target))
for ax, (image, label) in zip(axes[0, :], images_and_labels[:4]):
    ax.set_axis_off()
    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')
    ax.set_title('Training: %i' % label)
    
images_and_predictions = list(zip(images[n_samples // 2:], predicted))
for ax, (image, prediction) in zip(axes[1, :], images_and_predictions[:4]):
    ax.set_axis_off()
    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')
    ax.set_title('Prediction: %i' % prediction)
print("\nClassification report for classifier %s:\n%s\n" % (GNB_classifier, metrics.classification_report(y_test, predicted)))
disp = metrics.plot_confusion_matrix(GNB_classifier, X_test, y_test)
disp.figure_.suptitle("Confusion Matrix")
print("\nConfusion matrix:\n%s" % disp.confusion_matrix)
print("\nAccuracy of the Algorithm: ", GNB_classifier.score(X_test, y_test))
plt.show()